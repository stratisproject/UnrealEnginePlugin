// Copyright Â© 2022 Stratis Platform.
//
// This file is part of Stratis Plugin for Unreal Engine. The full copyright notice, including
// terms governing use, modification, and redistribution, is contained in the
// file LICENSE at the root of the source code distribution tree.

/**
 * Stratis Node API
 * Access to the Stratis Node's api.
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "ReceiptResponse.h"

#include "Helpers.h"
#include "StratisAPIModule.h"

#include "Templates/SharedPointer.h"

namespace stratis {
namespace api {

void ReceiptResponse::WriteJson(JsonWriter& Writer) const
{
    Writer->WriteObjectStart();
    if (TransactionHash.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("TransactionHash"));
        WriteJsonValue(Writer, TransactionHash.GetValue());
    }
    if (BlockHash.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("BlockHash"));
        WriteJsonValue(Writer, BlockHash.GetValue());
    }
    if (BlockNumber.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("BlockNumber"));
        WriteJsonValue(Writer, BlockNumber.GetValue());
    }
    if (PostState.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("PostState"));
        WriteJsonValue(Writer, PostState.GetValue());
    }
    if (GasUsed.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("GasUsed"));
        WriteJsonValue(Writer, GasUsed.GetValue());
    }
    if (From.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("From"));
        WriteJsonValue(Writer, From.GetValue());
    }
    if (To.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("To"));
        WriteJsonValue(Writer, To.GetValue());
    }
    if (NewContractAddress.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("NewContractAddress"));
        WriteJsonValue(Writer, NewContractAddress.GetValue());
    }
    if (Success.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("Success"));
        WriteJsonValue(Writer, Success.GetValue());
    }
    if (ReturnValue.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("ReturnValue"));
        WriteJsonValue(Writer, ReturnValue.GetValue());
    }
    if (Bloom.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("Bloom"));
        WriteJsonValue(Writer, Bloom.GetValue());
    }
    if (Error.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("Error"));
        WriteJsonValue(Writer, Error.GetValue());
    }
    if (Logs.IsSet()) {
        Writer->WriteIdentifierPrefix(TEXT("Logs"));
        WriteJsonValue(Writer, Logs.GetValue());
    }
    Writer->WriteObjectEnd();
}

bool ReceiptResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
    const TSharedPtr<FJsonObject>* Object;
    if (!JsonValue->TryGetObject(Object))
        return false;

    bool ParseSuccess = true;

    ParseSuccess &= TryGetJsonValue(*Object, TEXT("TransactionHash"), TransactionHash);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("BlockHash"), BlockHash);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("BlockNumber"), BlockNumber);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("PostState"), PostState);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("GasUsed"), GasUsed);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("From"), From);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("To"), To);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("NewContractAddress"), NewContractAddress);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("Success"), Success);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("ReturnValue"), ReturnValue);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("Bloom"), Bloom);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("Error"), Error);
    ParseSuccess &= TryGetJsonValue(*Object, TEXT("Logs"), Logs);

    return ParseSuccess;
}

} // namespace api
} // namespace stratis
